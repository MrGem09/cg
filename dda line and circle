/*Write C++ program to draw a given pattern. Use DDA line and Bresenhamâ€™s
circle drawing algorithm. Apply the concept of encapsulation*/

//drawing(void DDA,cir)

#include <iostream>           
#include <graphics.h>                              // Including graphics library for drawing functions
#include <math.h>                                  // Including math library for mathematical functions
using namespace std;

class practical {                                  // Declaration of class named practical
public:
    void DDA(float, float, float, float, int);                            // Function to implement DDA line drawing algorithm
    void cir(int, int, int);                               // Function to implement Bresenham's circle drawing algorithm
};



//(variables,putpixe)
void practical::DDA(float x1, float y1, float x2, float y2, int col) {                    // Definition of DDA function
    int dx, dy;                                                                  // Declaring variables for differences in coordinates
    int steps;                                   // Variable to store number of steps for drawing
    float xincre, yincre, x, y;            // Variables for incremental values and current coordinates

    dx = x2 - x1;        // Calculating differences in x-coordinates
    dy = y2 - y1;       // Calculating differences in y-coordinates

    if (abs(dx) >= abs(dy)) {         // Determining number of steps based on coordinate differences
        steps = dx;
    } else {
        steps = dy;
    }

    xincre = (float)dx / steps;                // Calculating incremental value for x
    yincre = (float)dy / steps;               // Calculating incremental value for y
    x = x1;                    // Initializing x-coordinate
    y = y1;              // Initializing y-coordinate

    putpixel(x, y, 8);            // Plotting the starting pixel
    for (int i = 0; i < steps; i++) {            // Loop for drawing line pixel by pixel
        x = x + xincre;                  // Incrementing x-coordinate
        y = y + yincre;       // Incrementing y-coordinate
        x1 = x + 0.5; // Rounding off x-coordinate
        y1 = y + 0.5; // Rounding off y-coordinate
        putpixel(x1, y1, col); // Plotting pixels for the line
    }
}




//(variable, putpixel, condition, putpixel)
void practical::cir(int x, int y, int rad) { // Definition of circle drawing function
    int dp, x1, y1; // Declaring variables for circle plotting
    x1 = 0; // Initializing x-coordinate
    y1 = rad; // Initializing y-coordinate
    dp = 3 - 2 * rad; // Initializing decision parameter

    putpixel(x, y, 15); // Plotting the center of the circle

    while (x1 <= y1) { // Loop for plotting circle points
        if (dp <= 0) { // Checking decision parameter
            dp = dp + 4 * (x1) + 6; // Updating decision parameter
            x1 = x1 + 1; // Incrementing x-coordinate
        } else {
            dp = dp + 4 * (x1 - y1) + 10; // Updating decision parameter
            x1 = x1 + 1; // Incrementing x-coordinate
            y1 = y1 - 1; // Decrementing y-coordinate
        }

        // Plotting circle points in different octants
        putpixel(x + x1, y + y1, 1); delay(5);
        putpixel(x + x1, y - y1, 2); delay(5);
        putpixel(x - x1, y + y1, 3); delay(5);
        putpixel(x - x1, y - y1, 4); delay(5);
        putpixel(x + y1, y + x1, 5); delay(5);
        putpixel(x + y1, y - x1, 6); delay(5);
        putpixel(x - y1, y + x1, 7); delay(5);
        putpixel(x - y1, y - x1, 8); delay(5);
    }
}






int main() { // Main function

    int gd=DETECT, gm; // Initializing graphics mode
    initgraph(&gd, &gm, (char*)""); // Initializing graphics window


    int  r1, r2; // Declaring  and radii
    float len; // Variable for line length
    practical pr1; // Creating practical objects



    int x = 400 / 2; // Calculating center x-coordinate
    int y = 300 / 2; // Calculating center y-coordinate
    r1 = 100; // Radius for first circle
    r2 = 50; // Radius for second circle
    
    
// Drawing the first circle
    pr1.cir(x, y, r1); 

    len = sqrt(r1 * r1 - r2 * r2); // Calculating length for connecting lines

    pr1.DDA(x, y - r1, x + len, y + r2, 5); delay(5); // Drawing lines between circles
    pr1.DDA(x, y - r1, x - len, y + r2, 9); delay(5);
    pr1.DDA(x - len, y + r2, x + len, y + r2, 13); delay(5);
    
// Drawing the second circle
    pr1.cir(x, y, r2); 

    getch(); // Waiting for user input
    closegraph(); // Closing graphics window

    return 0; // Returning 0 to indicate successful execution
}
