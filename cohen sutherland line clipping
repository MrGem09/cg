/*Write C++ program to implement Cohen Southerland line clipping
algorithm*/

//(region code == boundries, function for point, line endpoint
#include<iostream>
#include<graphics.h>
#include<math.h>
using namespace std;

int LEFT=1,RIGHT=2,BOTTOM=4,TOP=8,xl,yl,xh,yh;        // Defining region codes for boundaries
int getcode(int x,int y)    // Function to determine region code for a point
{
    int code=0;
    if(y>yh)code|=TOP;
    if(y<yh)code|=BOTTOM;
    if(x>xh)code|=RIGHT;
    if(x<xh)code|=LEFT;
    return code;

}

//{ co-ordinate and endpoints}
int main()
{
    int gd=DETECT,gm;
    initgraph(&gd,&gm,NULL);
    cout<<"enter bottom left and top right co-ordinate of the window:";         // Input window coordinates
    cin>>xl>>yl>>xh>>yh;
    
    rectangle(xl,yl,xh,yh);
    int x1,x2,y1,y2;          // Input line endpoints
    cout<<"enter the endpoint of the line:";
    cin>>x1>>y1>>x2>>y2;
    setcolor(4);  //red color(4)
    line(x1,y1,x2,y2); // Draw the original line
    getch();     // Wait for user input




      // Determine region codes for the line endpoints
    int outcode1 = getcode(x1, y1), outcode2 = getcode(x2, y2);
    int accept = 0;

    // Cohen-Sutherland line clipping algorithm (While(1) 
	//slop, if(inside) , else if( outside line), else(choose endpoint, if intersection, update endpoint)
	
    while (1) {
        float m = float(y2 - y1) / (x2 - x1);        // slope of the line

        // If both endpoints are inside the window
        if (outcode1 == 0 && outcode2 == 0) {
            accept = 1; // Accept the line
            break;
        }
        // If the bitwise AND of the region codes is not zero, line is outside
        else if ((outcode1 & outcode2) != 0) {
            break; 
        } else {
            int x, y;
            int temp;
        

            // Choose one of the endpoints and clip it to the window boundaries
            if (outcode1 == 0) {
                temp = outcode2;
            } else {
                temp = outcode1;
            }

            // Determine intersection point based on the region code
            if (temp & TOP) {
                x = x1 + (yh - y1) / m;
                y = yh;
            } else if (temp & BOTTOM) {
                x = x1 + (yl - y1) / m;
                y = yl;
            } else if (temp & LEFT) {
                x = xl;
                y = y1 + m * (xl - x1);
            } else if (temp & RIGHT) {
                x = xh;
                y = y1 + m * (xh - x1);
            }

            // Update the endpoint and its region code
            if (temp == outcode1) {
                x1 = x;
                y1 = y;
                outcode1 = getcode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                outcode2 = getcode(x2, y2);
            }
        }
    }


    setcolor(BLUE);
    cout<<"after clipping:";
    if(accept)
    line(x1,y1,x2,y2);
    getch();
    closegraph();
    return 0;
}
